name: Build -> Push to ECR -> Terraform deploy (ECS Fargate)

# Run on pushes to main (adjust branch as required)

on:
  workflow_dispatch:

# on:
#   push:
#     branches: [ main ]

env:
  AWS_REGION: ap-south-1
  # repo name used in infra/variables.tf (default in your repo)
  ECR_REPO: my-strapi-project-vivek-git
  TF_VAR_db_password: ${{ secrets.DATABASE_PASSWORD }}
  TF_VAR_app_keys: ${{ secrets.STRAPI_APP_KEYS }}
  TF_VAR_admin_jwt_secret: ${{ secrets.STRAPI_ADMIN_JWT_SECRET }}
  TF_VAR_api_token_salt: ${{ secrets.STRAPI_API_TOKEN_SALT }}
  TF_VAR_jwt_secret: ${{ secrets.STRAPI_JWT_SECRET }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS account id
        id: acct
        run: |
          echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPO }}" >/dev/null 2>&1 || \
            aws ecr create-repository --repository-name "${{ env.ECR_REPO }}" --region ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        # Use Dockerfile.prod if you have one; fallback to Dockerfile
        run: |
          TAG="$(echo $GITHUB_SHA | cut -c1-8)"
          IMAGE="${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:${TAG}"
          # Expose the image uri and tag to subsequent steps
          echo "IMAGE_URI=$IMAGE" >> $GITHUB_ENV
          echo "IMAGE_TAG=$TAG" >> $GITHUB_ENV

          # Build using Dockerfile.prod if present
          if [ -f Dockerfile.prod ]; then
            docker build -f Dockerfile.prod -t "${IMAGE}" .
          else
            docker build -t "${IMAGE}" .
          fi

      - name: Push image to ECR
        run: |
          docker push "${IMAGE_URI}"
          # also push :latest tag if you like
          docker tag "${IMAGE_URI}" "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:latest" || true
          docker push "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:latest" || true

      
      # ---------------------------------------
      # Step 5: Register new ECS Task Definition
      # ---------------------------------------
      - name: Register new ECS task definition
        run: |
          FAMILY="strapi-service"
          IMAGE_URI="${IMAGE_URI}"
          DB_USER="strapiuser"
          DB_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"
          DB_HOST="${{ secrets.DB_HOST }}"
          DB_NAME="strapidb"

          # Encode special characters in DB password
          ENCODED_PW=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''${DB_PASSWORD}'''))")
          DB_URL="postgres://strapiuser:SuperSecurePassword123%2521%2540@:5432/strapidb?ssl=true&sslmode=require"
          echo "Using database URL: $DB_URL"

          # Try to get existing task definition
          if ! CURRENT_DEF=$(aws ecs describe-task-definition --task-definition $FAMILY 2>/dev/null); then
            echo "⚠️ No existing task definition found for $FAMILY. Please create one first in ECS."
            exit 1
          fi

          # Create new task definition JSON
          NEW_DEF=$(echo "$CURRENT_DEF" | jq \
            --arg IMAGE "$IMAGE_URI" \
            --arg DB_URL "$DB_URL" \
            '.taskDefinition
            | .containerDefinitions[0].image = $IMAGE
            | .containerDefinitions[0].environment |= map(
                if .name == "DATABASE_URL" then .value = $DB_URL else . end
              )
            | del(
                .taskDefinitionArn,
                .revision,
                .status,
                .requiresAttributes,
                .compatibilities,
                .registeredAt,
                .registeredBy
              )')

          echo "$NEW_DEF" > new-taskdef.json

          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-taskdef.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "✅ Registered new task definition: $TASK_DEF_ARN"
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      # ---------------------------------------
      # Step 6: Trigger Blue/Green Deployment
      # ---------------------------------------
      - name: Cancel any active deployments
        run: |
          DEPLOY_IDS=$(aws deploy list-deployments \
            --application-name strapi-codedeploy-app-vivek \
            --deployment-group-name strapi-ecs-deployment-group-vivek \
            --include-only-statuses Created Queued InProgress \
            --query 'deployments' --output text)

          if [ "$DEPLOY_IDS" != "None" ] && [ -n "$DEPLOY_IDS" ]; then
            for ID in $DEPLOY_IDS; do
              echo "Stopping deployment: $ID"
              aws deploy stop-deployment --deployment-id "$ID" --auto-rollback-enabled || true
            done
          else
            echo "✅ No active deployments found."
          fi

      - name: Trigger Blue/Green deployment via CodeDeploy
        run: |
          sed "s|<TASK_DEF_ARN>|${TASK_DEF_ARN}|g" appspec.yml > appspec-rendered.yml

          aws deploy create-deployment \
            --application-name strapi-codedeploy-app-vivek \
            --deployment-group-name strapi-ecs-deployment-group-vivek \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --revision "$(jq -n --arg content "$(cat appspec-rendered.yml)" '{revisionType:"AppSpecContent", appSpecContent:{content:$content}}')"